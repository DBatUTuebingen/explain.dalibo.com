"""empty message

Revision ID: c0aa1c5e8ce2
Revises:
Create Date: 2019-08-29 16:09:25.262942

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c0aa1c5e8ce2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.create_table(
        'plans',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('title', sa.String(), nullable=True),
        sa.Column('created', sa.DateTime(timezone=True), nullable=True),
        sa.Column('plan', sa.String(), nullable=True),
        sa.Column('sql', sa.String(), nullable=True),
        sa.Column('is_public', sa.Boolean(), nullable=True),
        sa.Column('delete_key', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        postgresql_partition_by='HASH (id)'
    )

    op.execute('CREATE SCHEMA plans;')
    op.execute("""
    -- Make new partitions
    do $$
    declare
        v_i INT4;
        v_sql TEXT;
    BEGIN
        for v_i in 0..49 LOOP
            v_sql := format('CREATE TABLE plans.%I partition OF public.plans FOR VALUES WITH (MODULUS 50, REMAINDER %s);', 'part_' || v_i, v_i);
            raise notice '%', v_sql;
            execute v_sql;
        END loop;
    END;
    $$ language plpgsql;


    --
    -- Name: get_random_string(integer); Type: FUNCTION; Schema: public; Owner: -
    --
    CREATE FUNCTION get_random_string(string_length integer) RETURNS text
        LANGUAGE plpgsql
        AS $$
    DECLARE
        possible_chars TEXT = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        output TEXT = '';
        i INT4;
        pos INT4;
    BEGIN
        FOR i IN 1..string_length LOOP
            pos := 1 + cast( random() * ( length(possible_chars) - 1) as INT4 );
            output := output || substr(possible_chars, pos, 1);
        END LOOP;
        RETURN output;
    END;
    $$;

    CREATE type register_plan_return as (
        id TEXT,
        delete_key TEXT
    );

    CREATE OR REPLACE FUNCTION public.register_plan(in_title text, in_plan
    text, in_sql text, in_is_public boolean)
     RETURNS register_plan_return
     LANGUAGE plpgsql
    AS $function$
    DECLARE
        use_hash_length int4 := 2;
        reply register_plan_return;
        insert_sql TEXT;
    BEGIN
        insert_sql := 'INSERT INTO public.plans (id, title, plan, sql,
        is_public, created, delete_key) VALUES ($1, $2, $3, $4, $5, now(), $6)';
        reply.delete_key := get_random_string( 50 );
        LOOP
            reply.id := get_random_string(use_hash_length);
            BEGIN
                execute insert_sql using reply.id, in_title, in_plan, in_sql, in_is_public, reply.delete_key;
                RETURN reply;
            EXCEPTION WHEN unique_violation THEN
                -- do nothing
            END;
            use_hash_length := use_hash_length + 1;
            IF use_hash_length >= 30 THEN
                raise exception 'Random string of length == 30 requested. something''s wrong.';
            END IF;
        END LOOP;
    END;
    $function$;
    """)  # noqa
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('plans')
    # ### end Alembic commands ###
