(window.webpackJsonp=window.webpackJsonp||[]).push([["index"],{36:function(e,a,n){"use strict";n.r(a);n(15);var l=n(3),t=n.n(l);new(n(1).default)({el:"#app",data:function(){return{samples:[["Example 1 (JSON)","plan_1.json","plan_1.sql"],["Example 1 (plain text)","plan_1.txt","plan_1.sql"],["Example 2","plan_2.json","plan_2.sql"],["Example 3","plan_3.json","plan_3.sql"],["Example 4","plan_4.json"],["Example 5","plan_5.json","plan_5.sql"],["With subplan","plan_6.txt"],["With CTE","plan_7.txt"],["Very large plan","plan_8.json"],["With trigger","plan_trigger.json","plan_trigger.sql"],["With trigger (plain text)","plan_trigger.txt","plan_trigger_2.sql"],["Parallel (verbose)","plan_parallel.json"],["Parallel (4 workers)","plan_parallel2.txt","plan_parallel2.sql"]],planInput:"",queryInput:"",draggingPlan:!1,draggingQuery:!1}},mounted(){const e=document.getElementsByTagName("textarea");Array.prototype.forEach.call(e,e=>{e.placeholder=e.placeholder.replace(/\\n/g,"\n")})},methods:{submitPlan(){planData[0]=this.planInput,planData[1]=this.queryInput,router.push({path:"plan"})},loadSample(e){t.a.get(staticUrl+"samples/"+e[1]).then(e=>{this.planInput=e.request.responseText}),e[2]?t.a.get(staticUrl+"samples/"+e[2]).then(e=>{this.queryInput=e.request.responseText}):this.queryInput=""},handleDrop(e){const a=e.srcElement;if(!(a instanceof HTMLTextAreaElement))return;if(this.draggingPlan=!1,this.draggingQuery=!1,!e.dataTransfer)return;const n=e.dataTransfer.files[0],l=new FileReader;l.onload=e=>{l.result instanceof ArrayBuffer||(a.value=l.result||"",a.dispatchEvent(new Event("input")))},l.readAsText(n)}}})}},[[36,"runtime","vendors~index~plan","vendors~index"]]]);